generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RequestPriority {
  LOW
  MEDIUM
  HIGH
}

enum ItemCategory {
  MEDICATION
  MEDICAL_SUPPLY
  NON_MEDICAL
  PURCHASES
}

enum UserType {
  SUPER_ADMIN
  ADMIN
  STAFF
  PARTNER
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  name         String
  passwordHash String
  type         UserType
  enabled      Boolean  @default(true)

  // Partner-only fields
  partnerDetails          Json?
  unallocatedItemRequests UnallocatedItemRequest[]
  donorOfferVisibilities  DonorOfferPartnerVisibility[]
  donorOfferItemRequests  DonorOfferItemRequest[]

  // There should only ever be one distribution
  distributions                    Distribution[]
  UnallocatedItemRequestAllocation UnallocatedItemRequestAllocation[]
  signOffs SignOff[]
}

model UserInvite {
  id             Int      @id @default(autoincrement())
  token          String   @unique
  userType       UserType
  email          String   @unique
  name           String
  partnerDetails Json?
  expiration     DateTime
}

model Item {
  id Int @id @default(autoincrement())

  // Columns that define a general item
  title           String
  type            String
  expirationDate  DateTime?
  unitSize        Int
  quantityPerUnit String?

  // Columns that define a unique line item
  category            ItemCategory
  donorName           String
  quantity            Int
  lotNumber           Int
  palletNumber        Int
  boxNumber           Int
  unitType            String?
  unitPrice           Decimal      @db.Money
  maxRequestLimit     String?
  donorShippingNumber String?
  hfhShippingNumber   String?
  datePosted          DateTime     @default(now())
  ndc                 String?
  notes               String?

  allowAllocations Boolean
  visible          Boolean
  gik              Boolean

  unallocatedItemRequestAllocations UnallocatedItemRequestAllocation[]

  donorOfferItemId                 Int?
  donorOfferItem                   DonorOfferItem?                   @relation(fields: [donorOfferItemId], references: [id])
  donorOfferItemRequestAllocations DonorOfferItemRequestAllocation[]
}

model UnallocatedItemRequest {
  id Int @id @default(autoincrement())

  // Points to User, but only valid for `PARTNER` users
  partner   User @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  partnerId Int

  title           String
  type            String
  expirationDate  DateTime?
  unitSize        Int
  quantityPerUnit String?

  priority RequestPriority
  quantity Int
  comments String

  createdAt DateTime @default(now())

  allocations UnallocatedItemRequestAllocation[]
}

model UnallocatedItemRequestAllocation {
  id Int @id @default(autoincrement())

  quantity Int

  partnerId Int?
  partner   User? @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  unallocatedItemRequestId Int?
  unallocatedItemRequest   UnallocatedItemRequest? @relation(fields: [unallocatedItemRequestId], references: [id])

  itemId          Int
  unallocatedItem Item @relation(fields: [itemId], references: [id])

  // There should only ever be one distribution
  distributions Distribution[]

  visible Boolean @default(false)
}

enum DonorOfferState {
  UNFINALIZED
  FINALIZED
  ARCHIVED
}

model DonorOffer {
  id Int @id @default(autoincrement())

  state                   DonorOfferState
  offerName               String
  donorName               String
  partnerResponseDeadline DateTime
  donorResponseDeadline   DateTime

  items               DonorOfferItem[]
  partnerVisibilities DonorOfferPartnerVisibility[]
}

model DonorOfferItem {
  id Int @id @default(autoincrement())

  donorOfferId Int
  donorOffer   DonorOffer @relation(fields: [donorOfferId], references: [id])

  title           String
  type            String
  expiration      DateTime?
  unitSize        Int
  unitType        String?
  quantityPerUnit String?

  quantity Int

  requests DonorOfferItemRequest[]
  items    Item[]
}

model DonorOfferItemRequest {
  id Int @id @default(autoincrement())

  donorOfferItemId Int
  donorOfferItem   DonorOfferItem @relation(fields: [donorOfferItemId], references: [id])

  partnerId Int
  partner   User @relation(fields: [partnerId], references: [id])

  quantity                        Int
  comments                        String
  priority                        RequestPriority
  DonorOfferItemRequestAllocation DonorOfferItemRequestAllocation[]

  createdAt DateTime @default(now())
}

model DonorOfferPartnerVisibility {
  id Int @id @default(autoincrement())

  donorOfferId Int
  donorOffer   DonorOffer @relation(fields: [donorOfferId], references: [id])

  partnerId Int
  partner   User @relation(fields: [partnerId], references: [id])
}

model DonorOfferItemRequestAllocation {
  id Int @id @default(autoincrement())

  quantity Int

  donorOfferItemRequestId Int
  donorOfferItemRequest   DonorOfferItemRequest @relation(fields: [donorOfferItemRequestId], references: [id])

  itemId       Int
  item         Item           @relation(fields: [itemId], references: [id])
  Distribution Distribution[]

  visible Boolean @default(false)
}

model Distribution {
  id Int @id @default(autoincrement())

  partnerId Int
  partner   User @relation(fields: [partnerId], references: [id])

  unallocatedItemRequestAllocationId Int?                              @unique
  unallocatedItemAllocation          UnallocatedItemRequestAllocation? @relation(fields: [unallocatedItemRequestAllocationId], references: [id])

  donorOfferItemRequestAllocationId Int?                             @unique
  donorOfferItemAllocation          DonorOfferItemRequestAllocation? @relation(fields: [donorOfferItemRequestAllocationId], references: [id])

  signOffId Int?
  signOff   SignOff? @relation(fields: [signOffId], references: [id])
}

enum ShipmentStatus {
  WAITING_ARRIVAL_FROM_DONOR
  LOAD_ON_SHIP_AIR
  ARRIVED_IN_HAITI
  CLEARED_CUSTOMS
  ARRIVED_AT_DEPO
  INVENTORIES
  READY_FOR_DISTRIBUTION
}

model ShippingStatus {
  id Int @id @default(autoincrement())

  donorShippingNumber String
  hfhShippingNumber   String

  value ShipmentStatus
}

model SignOff {
  id Int @id @default(autoincrement())

  staffMemberName String
  partnerName     String
  date            DateTime
  signatureUrl    String

  createdAt DateTime @default(now())

  partnerId Int
  partner   User @relation(fields: [partnerId], references: [id])

  distributions Distribution[]
}
