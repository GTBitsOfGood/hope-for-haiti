generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RequestPriority {
  LOW
  MEDIUM
  HIGH
}

enum ItemCategory {
  MEDICATION
  MEDICAL_SUPPLY
  NON_MEDICAL
  PURCHASES
}

enum UserType {
  SUPER_ADMIN
  ADMIN
  STAFF
  PARTNER
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  name         String
  passwordHash String
  type         UserType
  tag          String?
  enabled      Boolean  @default(true)

  // Partner-only fields
  partnerDetails         Json?
  generalItemRequests    GeneralItemRequest[] 
  allocations            Allocation[]

  // There should only ever be one distribution
  distributions Distribution[]
  wishlists     Wishlist[]
}

model UserInvite {
  id             Int      @id @default(autoincrement())
  token          String   @unique
  userType       UserType
  email          String   @unique
  name           String
  partnerDetails Json?
  expiration     DateTime
}

// A specific item inside a general item. Ex: a specific box inside a donation of many boxes
model LineItem {
  id Int @id @default(autoincrement())

  // Columns that define a general item
  expirationDate  DateTime? @db.Date
  unitType        String
  quantityPerUnit Int

  // Columns that define a unique line item
  category            ItemCategory
  donorName           String
  quantity            Int
  lotNumber           String
  palletNumber        String
  boxNumber           String
  unitPrice           Decimal      @db.Money
  maxRequestLimit     String?
  donorShippingNumber String?
  hfhShippingNumber   String?
  datePosted          DateTime     @default(now())
  ndc                 String?
  notes               String?

  allowAllocations Boolean
  visible          Boolean
  gik              Boolean

  generalItemId Int?
  generalItem   GeneralItem? @relation(fields: [generalItemId], references: [id], onDelete: Cascade)

  allocationId Int?        @unique
  allocation   Allocation? @relation
}

model Allocation {
  id Int @id @default(autoincrement())

  partnerId Int?
  partner   User? @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  lineItemId Int      @unique
  lineItem   LineItem @relation(fields: [lineItemId], references: [id], onDelete: Cascade)

  distributionId Int?
  distribution   Distribution? @relation(fields: [distributionId], references: [id], onDelete: Cascade)

  signOffId Int?
  signOff   SignOff? @relation(fields: [signOffId], references: [id], onDelete: Cascade)
}

enum DonorOfferState {
  UNFINALIZED
  FINALIZED
  ARCHIVED
}

model DonorOffer {
  id Int @id @default(autoincrement())

  state                   DonorOfferState
  offerName               String
  donorName               String
  partnerResponseDeadline DateTime
  donorResponseDeadline   DateTime

  items               GeneralItem[]
}

model GeneralItem {
  id Int @id @default(autoincrement())

  donorOfferId Int
  donorOffer   DonorOffer @relation(fields: [donorOfferId], references: [id], onDelete: Cascade)

  title           String
  type            String

  quantity        Int
  requestQuantity Int?

  requests GeneralItemRequest[]
  items    LineItem[]

  @@unique([donorOfferId, title, type])
}

model GeneralItemRequest {
  id Int @id @default(autoincrement())

  generalItemId Int         @map("donorOfferItemId")
  generalItem   GeneralItem @relation(fields: [generalItemId], references: [id], onDelete: Cascade)

  partnerId Int
  partner   User @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  quantity Int
  comments String?
  priority RequestPriority?

  createdAt DateTime @default(now())

  @@unique([generalItemId, partnerId])
}

model Distribution {
  id Int @id @default(autoincrement())

  partnerId Int
  partner   User @relation(fields: [partnerId], references: [id])

  pending Boolean @default(false)

  allocations Allocation[]
}

enum ShipmentStatus {
  WAITING_ARRIVAL_FROM_DONOR
  LOAD_ON_SHIP_AIR
  ARRIVED_IN_HAITI
  CLEARED_CUSTOMS
  ARRIVED_AT_DEPO
  INVENTORIES
  READY_FOR_DISTRIBUTION
}

model ShippingStatus {
  id Int @id @default(autoincrement())

  donorShippingNumber String
  hfhShippingNumber   String

  value ShipmentStatus

  @@unique([donorShippingNumber, hfhShippingNumber])
}

model SignOff {
  id Int @id @default(autoincrement())

  staffMemberName String
  partnerName     String
  date            DateTime
  signatureUrl    String?

  createdAt DateTime @default(now())

  allocations Allocation[]
}

model Wishlist {
  id Int @id @default(autoincrement())

  name     String
  unitSize String
  quantity Int
  priority RequestPriority

  lastUpdated DateTime @updatedAt

  comments  String
  partnerId Int
  partner   User   @relation(fields: [partnerId], references: [id], onDelete: Cascade)
}
